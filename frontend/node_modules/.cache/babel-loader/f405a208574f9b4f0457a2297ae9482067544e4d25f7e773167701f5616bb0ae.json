{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\napi.interceptors.response.use(response => response, error => {\n  // Removed auth redirect since app runs locally without authentication\n  return Promise.reject(error);\n});\nexport const quizAPI = {\n  generateQuiz: config => api.post('/quiz/generate', config),\n  submitAnswer: (quizId, questionId, answer) => api.post(`/quiz/${quizId}/answer`, {\n    question_id: questionId,\n    answer\n  }),\n  getQuizResults: quizId => api.get(`/quiz/${quizId}/results`),\n  getQuizHistory: () => api.get('/quiz/history')\n};\nexport const authAPI = {\n  login: credentials => api.post('/auth/login', credentials),\n  register: userData => api.post('/auth/register', userData),\n  logout: () => api.post('/auth/logout'),\n  refreshToken: () => api.post('/auth/refresh')\n};\nexport const userAPI = {\n  getProfile: () => api.get('/users/profile'),\n  updateProfile: data => api.put('/users/profile', data),\n  getStats: () => api.get('/users/stats'),\n  getProgress: () => api.get('/users/progress')\n};\nexport const casesAPI = {\n  getCases: filters => api.get('/cases', {\n    params: filters\n  }),\n  getCase: caseId => api.get(`/cases/${caseId}`),\n  searchCases: params => api.get('/cases/search', {\n    params\n  }),\n  getCategories: () => api.get('/cases/categories'),\n  getAgeGroups: () => api.get('/cases/age-groups'),\n  getComplexityLevels: () => api.get('/cases/complexity-levels'),\n  getDiagnoses: params => api.get('/cases/diagnoses', {\n    params\n  }),\n  getRandomCases: params => api.get('/cases/random', {\n    params\n  }),\n  createCase: caseData => api.post('/cases', caseData),\n  updateCase: (caseId, caseData) => api.put(`/cases/${caseId}`, caseData),\n  updateBookmark: (caseId, bookmarked) => api.post(`/cases/${caseId}/bookmark`, {\n    bookmarked\n  }),\n  updateNotes: (caseId, notes) => api.post(`/cases/${caseId}/notes`, {\n    notes\n  }),\n  getUserProgress: caseId => api.get(`/cases/${caseId}/progress`),\n  updateProgress: (caseId, progress) => api.put(`/cases/${caseId}/progress`, progress)\n};\nexport const achievementsAPI = {\n  getAchievements: () => api.get('/achievements'),\n  unlockAchievement: achievementId => api.post(`/achievements/${achievementId}/unlock`)\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","response","error","Promise","reject","quizAPI","generateQuiz","post","submitAnswer","quizId","questionId","answer","question_id","getQuizResults","get","getQuizHistory","authAPI","login","credentials","register","userData","logout","refreshToken","userAPI","getProfile","updateProfile","data","put","getStats","getProgress","casesAPI","getCases","filters","params","getCase","caseId","searchCases","getCategories","getAgeGroups","getComplexityLevels","getDiagnoses","getRandomCases","createCase","caseData","updateCase","updateBookmark","bookmarked","updateNotes","notes","getUserProgress","updateProgress","progress","achievementsAPI","getAchievements","unlockAchievement","achievementId"],"sources":["/home/endrawes/diagnosis_quiz_tool/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\napi.interceptors.request.use((config) => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    // Removed auth redirect since app runs locally without authentication\n    return Promise.reject(error);\n  }\n);\n\nexport const quizAPI = {\n  generateQuiz: (config) => api.post('/quiz/generate', config),\n  submitAnswer: (quizId, questionId, answer) => \n    api.post(`/quiz/${quizId}/answer`, { question_id: questionId, answer }),\n  getQuizResults: (quizId) => api.get(`/quiz/${quizId}/results`),\n  getQuizHistory: () => api.get('/quiz/history'),\n};\n\nexport const authAPI = {\n  login: (credentials) => api.post('/auth/login', credentials),\n  register: (userData) => api.post('/auth/register', userData),\n  logout: () => api.post('/auth/logout'),\n  refreshToken: () => api.post('/auth/refresh'),\n};\n\nexport const userAPI = {\n  getProfile: () => api.get('/users/profile'),\n  updateProfile: (data) => api.put('/users/profile', data),\n  getStats: () => api.get('/users/stats'),\n  getProgress: () => api.get('/users/progress'),\n};\n\nexport const casesAPI = {\n  getCases: (filters) => api.get('/cases', { params: filters }),\n  getCase: (caseId) => api.get(`/cases/${caseId}`),\n  searchCases: (params) => api.get('/cases/search', { params }),\n  getCategories: () => api.get('/cases/categories'),\n  getAgeGroups: () => api.get('/cases/age-groups'),\n  getComplexityLevels: () => api.get('/cases/complexity-levels'),\n  getDiagnoses: (params) => api.get('/cases/diagnoses', { params }),\n  getRandomCases: (params) => api.get('/cases/random', { params }),\n  createCase: (caseData) => api.post('/cases', caseData),\n  updateCase: (caseId, caseData) => api.put(`/cases/${caseId}`, caseData),\n  updateBookmark: (caseId, bookmarked) => api.post(`/cases/${caseId}/bookmark`, { bookmarked }),\n  updateNotes: (caseId, notes) => api.post(`/cases/${caseId}/notes`, { notes }),\n  getUserProgress: (caseId) => api.get(`/cases/${caseId}/progress`),\n  updateProgress: (caseId, progress) => api.put(`/cases/${caseId}/progress`, progress),\n};\n\nexport const achievementsAPI = {\n  getAchievements: () => api.get('/achievements'),\n  unlockAchievement: (achievementId) => api.post(`/achievements/${achievementId}/unlock`),\n};\n\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}