{"ast":null,"code":"import axios from'axios';const API_BASE_URL=process.env.REACT_APP_API_URL||'http://localhost:5000/api';const api=axios.create({baseURL:API_BASE_URL,headers:{'Content-Type':'application/json'}});api.interceptors.request.use(config=>{const token=localStorage.getItem('token');if(token){config.headers.Authorization=\"Bearer \".concat(token);}return config;});api.interceptors.response.use(response=>response,error=>{var _error$response;if(((_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status)===401){localStorage.removeItem('token');window.location.href='/login';}return Promise.reject(error);});export const quizAPI={generateQuiz:config=>api.post('/quiz/generate',config),submitAnswer:(quizId,questionId,answer)=>api.post(\"/quiz/\".concat(quizId,\"/answer\"),{question_id:questionId,answer}),getQuizResults:quizId=>api.get(\"/quiz/\".concat(quizId,\"/results\")),getQuizHistory:()=>api.get('/quiz/history')};export const authAPI={login:credentials=>api.post('/auth/login',credentials),register:userData=>api.post('/auth/register',userData),logout:()=>api.post('/auth/logout'),refreshToken:()=>api.post('/auth/refresh')};export const userAPI={getProfile:()=>api.get('/users/profile'),updateProfile:data=>api.put('/users/profile',data),getStats:()=>api.get('/users/stats'),getProgress:()=>api.get('/users/progress')};export const casesAPI={getCases:filters=>api.get('/cases',{params:filters}),getCase:caseId=>api.get(\"/cases/\".concat(caseId)),searchCases:params=>api.get('/cases/search',{params}),getCategories:()=>api.get('/cases/categories'),getAgeGroups:()=>api.get('/cases/age-groups'),getComplexityLevels:()=>api.get('/cases/complexity-levels'),getDiagnoses:params=>api.get('/cases/diagnoses',{params}),getRandomCases:params=>api.get('/cases/random',{params}),createCase:caseData=>api.post('/cases',caseData),updateCase:(caseId,caseData)=>api.put(\"/cases/\".concat(caseId),caseData),updateBookmark:(caseId,bookmarked)=>api.post(\"/cases/\".concat(caseId,\"/bookmark\"),{bookmarked}),updateNotes:(caseId,notes)=>api.post(\"/cases/\".concat(caseId,\"/notes\"),{notes}),getUserProgress:caseId=>api.get(\"/cases/\".concat(caseId,\"/progress\")),updateProgress:(caseId,progress)=>api.put(\"/cases/\".concat(caseId,\"/progress\"),progress)};export const achievementsAPI={getAchievements:()=>api.get('/achievements'),unlockAchievement:achievementId=>api.post(\"/achievements/\".concat(achievementId,\"/unlock\"))};export default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","concat","response","error","_error$response","status","removeItem","window","location","href","Promise","reject","quizAPI","generateQuiz","post","submitAnswer","quizId","questionId","answer","question_id","getQuizResults","get","getQuizHistory","authAPI","login","credentials","register","userData","logout","refreshToken","userAPI","getProfile","updateProfile","data","put","getStats","getProgress","casesAPI","getCases","filters","params","getCase","caseId","searchCases","getCategories","getAgeGroups","getComplexityLevels","getDiagnoses","getRandomCases","createCase","caseData","updateCase","updateBookmark","bookmarked","updateNotes","notes","getUserProgress","updateProgress","progress","achievementsAPI","getAchievements","unlockAchievement","achievementId"],"sources":["/home/endrawes/diagnosis_quiz_tool/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\napi.interceptors.request.use((config) => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response?.status === 401) {\n      localStorage.removeItem('token');\n      window.location.href = '/login';\n    }\n    return Promise.reject(error);\n  }\n);\n\nexport const quizAPI = {\n  generateQuiz: (config) => api.post('/quiz/generate', config),\n  submitAnswer: (quizId, questionId, answer) => \n    api.post(`/quiz/${quizId}/answer`, { question_id: questionId, answer }),\n  getQuizResults: (quizId) => api.get(`/quiz/${quizId}/results`),\n  getQuizHistory: () => api.get('/quiz/history'),\n};\n\nexport const authAPI = {\n  login: (credentials) => api.post('/auth/login', credentials),\n  register: (userData) => api.post('/auth/register', userData),\n  logout: () => api.post('/auth/logout'),\n  refreshToken: () => api.post('/auth/refresh'),\n};\n\nexport const userAPI = {\n  getProfile: () => api.get('/users/profile'),\n  updateProfile: (data) => api.put('/users/profile', data),\n  getStats: () => api.get('/users/stats'),\n  getProgress: () => api.get('/users/progress'),\n};\n\nexport const casesAPI = {\n  getCases: (filters) => api.get('/cases', { params: filters }),\n  getCase: (caseId) => api.get(`/cases/${caseId}`),\n  searchCases: (params) => api.get('/cases/search', { params }),\n  getCategories: () => api.get('/cases/categories'),\n  getAgeGroups: () => api.get('/cases/age-groups'),\n  getComplexityLevels: () => api.get('/cases/complexity-levels'),\n  getDiagnoses: (params) => api.get('/cases/diagnoses', { params }),\n  getRandomCases: (params) => api.get('/cases/random', { params }),\n  createCase: (caseData) => api.post('/cases', caseData),\n  updateCase: (caseId, caseData) => api.put(`/cases/${caseId}`, caseData),\n  updateBookmark: (caseId, bookmarked) => api.post(`/cases/${caseId}/bookmark`, { bookmarked }),\n  updateNotes: (caseId, notes) => api.post(`/cases/${caseId}/notes`, { notes }),\n  getUserProgress: (caseId) => api.get(`/cases/${caseId}/progress`),\n  updateProgress: (caseId, progress) => api.put(`/cases/${caseId}/progress`, progress),\n};\n\nexport const achievementsAPI = {\n  getAchievements: () => api.get('/achievements'),\n  unlockAchievement: (achievementId) => api.post(`/achievements/${achievementId}/unlock`),\n};\n\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}